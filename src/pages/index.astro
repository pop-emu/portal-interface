---
import Figure from "../components/Figure.astro";
import { MAX_FIGURES } from "../config";
import "./index.css"
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro</title>
	</head>
	<body>
		<div id="topMenu">
			<h1>Portal Emulator</h1>
			<input type="text" maxlength="15" minlength="7" placeholder="0.0.0.0" pattern="^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$" id="address" required>
			<div id="buttons">
				<button id="connect">Connect</button>
				<button id="update">update</button>
			</div>
		</div>
		<input type="file" id="fileElem" style="display:none" />
		<div id="figures">
			{
				[...Array(MAX_FIGURES)].map((item, index) => {
					return <Figure index={index} />
				})
			}
		</div>
	</body>
</html>

<script>
	import figuresList from "../assets/figures.json"

	const connectButton = document.getElementById("connect")! as HTMLElement;
	const updateButton = document.getElementById("update")! as HTMLElement;
	const fileInput = document.getElementById("fileElem")! as HTMLElement;
	const IPInput = document.getElementById("address")! as HTMLInputElement;

	const DEVICE_URL = () => {
		return `http://${IPInput.value!}`;
	}


	connectButton.onclick = () => {
		Connect();
	};
	updateButton.onclick = () =>
	{
		UpdateStatus();
	}
	fileInput.onchange = async (ev: Event) =>
	{
		const element = ev.target as HTMLInputElement;
		const index = parseInt(element.dataset.lastIndex!);

		const file = element.files![0];

		const response = await fetch(`${DEVICE_URL()}/api/v1/figure/${index}/set`, {method: "POST", body: await file.arrayBuffer()});

		console.log(response);

		UpdateStatus();
	}

	

	for(let i = 0; i < 16; i++)
	{
		const figureElement = document.querySelector(`[data-index="${i}"`)!;
		figureElement.querySelector(".clearBtn")!.addEventListener("click", ClearFigure);
		figureElement.querySelector(".saveBtn")!.addEventListener("click", SaveFigure);
		figureElement.querySelector(".loadBtn")!.addEventListener("click", LoadFigure);
	}

	async function Connect()
	{
		let infoResponse = await fetch(DEVICE_URL() + "/api/v1/info", {method: "GET"});

		while(!infoResponse.ok)
		{
			console.log("retrying...")
			infoResponse = await fetch(DEVICE_URL() + "/api/v1/info", {method: "GET"});
		}

		const info = await infoResponse.json();

		console.log(info);

		connectButton.textContent = "Connected!";
	}

	async function UpdateStatus()
	{
		const statusResponse = await fetch(DEVICE_URL() + "/api/v1/status", {method: "GET"});

		console.log(statusResponse);

		if(statusResponse.ok)
		{
			const status = await statusResponse.json();

			const figures = status.figures;

			for(let i = 0; i < figures.length; i++)
			{
				const figure = figures[i];
				const figureElement = document.querySelector(`[data-index="${i}"`)! as HTMLElement;

				figureElement.dataset.id = figure.id;
				figureElement.dataset.variant = figure.variant;
				figureElement.dataset.status = figure.status;

				const nameElement = figureElement.querySelector(".name")!;

				const figureObject = figuresList.find((fig: any) => {
					return fig.Id == figure.id && fig.Variant == figure.variant;
				})

				if(figure.status == 0 || figure.status == 2)
				{
					nameElement.textContent = "None";
				}
				else 
				{
					if(figureObject != undefined)
					{
						nameElement.textContent = figureObject.Name;
					}
					else {
						nameElement.textContent = "Unknown";
					}
				}
			}
		}
	}

	async function ClearFigure(event: Event)
	{
		const element = event.target! as HTMLElement;

		const figure = element.parentNode! as HTMLElement;

		const index: number = parseInt(figure.dataset.index!);

		const response = await fetch(`${DEVICE_URL()}/api/v1/figure/${index}/clear`, {method: "POST"});

		console.log(response);

		UpdateStatus();
	}

	async function SaveFigure(event: Event)
	{
		const element = event.target! as HTMLElement;

		const figure = element.parentNode! as HTMLElement;

		const index: number = parseInt(figure.dataset.index!);

		const response = await fetch(`${DEVICE_URL()}/api/v1/figure/${index}/get`, {method: "GET"});

		console.log(response);

		const nameElement = figure.querySelector(".name")!;

		const blob = new Blob([await response.arrayBuffer()], { type: "application/octet-stream" });
		const url = window.URL.createObjectURL(blob);
		const a = document.createElement("a");
		a.href = url;
		a.download = `${nameElement.textContent}.bin`;
		document.body.appendChild(a);
		a.style.display = "none";
		a.click();
		a.remove();
		setTimeout(() => window.URL.revokeObjectURL(url), 1000);
	}

	async function LoadFigure(event: Event)
	{
		const element = event.target! as HTMLElement;

		const figure = element.parentNode! as HTMLElement;

		const index: number = parseInt(figure.dataset.index!);

		const fileElement = document.querySelector("#fileElem")! as HTMLElement;

		fileElement.dataset.lastIndex = `${index}`;

		fileElement.click();
	}
</script>